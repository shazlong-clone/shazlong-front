{"version":3,"file":"static/js/878.0206f041.chunk.js","mappings":"sKAEA,MA+CA,EA/CcA,IAAkC,IAAjC,KAAEC,EAAI,UAAEC,EAAS,OAAEC,GAAQH,EAExC,MAAMI,GAAWC,EAAAA,EAAAA,MAEXC,EAAiBC,IAErB,MAAMC,EAAeD,IAAUJ,EAG/BD,EAAUM,EAAe,GAAKD,GAI5BH,EADEI,EACO,CAAC,EAED,CACPC,OAAO,IAADC,QAAMC,EAAAA,EAAAA,IAAmB,CAC7BR,OAAQI,MAGd,EAGF,OACEK,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,QAASA,IAAMT,EAAc,YAAYO,SAAC,cAC9CC,EAAAA,EAAAA,KAAA,MAAIC,QAASA,IAAMT,EAAc,QAAQO,SAAC,UAC1CC,EAAAA,EAAAA,KAAA,MAAIC,QAASA,IAAMT,EAAc,WAAWO,SAAC,kBAGjDC,EAAAA,EAAAA,KAAA,SAAAD,SACGZ,EAAKe,KAAKC,IAEPL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAKC,YACVJ,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAKE,QACVL,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAKG,YAHHH,EAAKC,gBAQd,ECRZ,EAjCYG,KACV,MAAOpB,EAAMqB,GAAWC,EAAAA,SAAe,KAChCpB,EAAQD,GAAaqB,EAAAA,SAAe,KAE3CC,EAAAA,EAAAA,YAAU,KACRC,MAAM,8CACHC,MAAMC,GAAaA,EAASC,SAC5BF,MAAME,GAASN,EAAQM,IAAM,GAC/B,IAEH,MAAOC,IAAgBC,EAAAA,EAAAA,OACvBN,EAAAA,EAAAA,YAAU,KACR,MAAMO,EAAcF,EAAaG,IAAI,UAErC9B,EAAU6B,EAAY,GACrB,CAACF,IAEJ,MAAMI,EAAa9B,EACf,IAAIF,GAAMiC,MAAK,CAACC,EAAGC,KACjB,MAAMC,EAAaF,EAAEhC,GACfmC,EAAcF,EAAEjC,GAEtB,OAAOkC,GAAcC,EAAcD,EAAWE,cAAcD,GAAe,CAAC,IAE9ErC,EAEJ,OACEa,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC0B,EAAK,CAACvC,KAAMgC,EAAY9B,OAAQA,EAAQD,UAAWA,KAChD,ECtBV,QARA,WACE,OACEY,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC2B,EAAY,KAGnB,C","sources":["components/Test/components/Table.js","components/Test/index.js","pages/Test.js"],"sourcesContent":["import { createSearchParams, useNavigate } from 'react-router-dom';\n\nconst Table = ({ data, setSortBy, sortBy }) => {\n  // react-outer utility hook to manage navigation\n  const navigate = useNavigate();\n\n  const handleSorting = (value) => {\n    // Check if the new value is the active sortBy value\n    const isActiveSort = value === sortBy;\n\n    // Update sortBy in the React land\n    setSortBy(isActiveSort ? '' : value);\n\n    // Update sortBy in the URL land\n    if (isActiveSort) {\n      navigate({});\n    } else {\n      navigate({\n        search: `?${createSearchParams({\n          sortBy: value,\n        })}`,\n      });\n    }\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th onClick={() => handleSorting('username')}>Username</th>\n          <th onClick={() => handleSorting('name')}>Name</th>\n          <th onClick={() => handleSorting('website')}>website</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item) => {\n          return (\n            <tr key={item.username}>\n              <td>{item.username}</td>\n              <td>{item.name}</td>\n              <td>{item.website}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport Table from './components/Table';\nimport { useSearchParams } from 'react-router-dom';\nconst App = () => {\n  const [data, setData] = React.useState([]);\n  const [sortBy, setSortBy] = React.useState('');\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((json) => setData(json));\n  }, []);\n\n  const [searchParams] = useSearchParams();\n  useEffect(() => {\n    const sortByQuery = searchParams.get('sortBy');\n\n    setSortBy(sortByQuery);\n  }, [searchParams]);\n\n  const sortedData = sortBy\n    ? [...data].sort((a, b) => {\n        const firstValue = a[sortBy];\n        const secondValue = b[sortBy];\n\n        return firstValue && secondValue ? firstValue.localeCompare(secondValue) : 0;\n      })\n    : data;\n\n  return (\n    <div>\n      <Table data={sortedData} sortBy={sortBy} setSortBy={setSortBy} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ClickCounter from '../components/Test';\n\nfunction Test() {\n  return (\n    <div>\n      <ClickCounter />\n    </div>\n  );\n}\n\nexport default Test;\n"],"names":["_ref","data","setSortBy","sortBy","navigate","useNavigate","handleSorting","value","isActiveSort","search","concat","createSearchParams","_jsxs","children","_jsx","onClick","map","item","username","name","website","App","setData","React","useEffect","fetch","then","response","json","searchParams","useSearchParams","sortByQuery","get","sortedData","sort","a","b","firstValue","secondValue","localeCompare","Table","ClickCounter"],"sourceRoot":""}